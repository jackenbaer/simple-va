name: "Reusable Go CI/CD"

on:
  workflow_call:
    inputs:
      go-version:
        type: string
        default: '1.24.2'
      run-tests:
        type: boolean
        default: false
      run-vulncheck:
        type: boolean
        default: false
      do-build:
        type: boolean
        default: false
      do-check-api-version:
        type: boolean
        default: false  
      do-release:
        type: boolean
        default: false
      do-build-docker:
        type: boolean
        default: false
jobs:
  test:
    if: ${{ inputs.run-tests }}
    name: Run Go Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
      - name: Test
        run: go test -v ./...

  vulncheck:
    if: ${{ inputs.run-vulncheck }}
    name: Run govulncheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ inputs.go-version }}
          go-package: './...'

  build:
    if: ${{ inputs.do-build }}
    name: Build & Inject Version
    needs: [test, vulncheck]    
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
      - name: Collect build metadata
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -ldflags "-X 'main.Version=${{ github.ref_name }}' \
                              -X 'main.Commit=${COMMIT}' \
                              -X 'main.BuildTime=${BUILD_TIME}'" \
            -o simple-va-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./src
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: simple-va-${{ matrix.os }}-${{ matrix.arch }}
          path: ./simple-va-${{ matrix.os }}-${{ matrix.arch }}*

  docker_image:
    if: ${{ inputs.do-build-docker }}
    name: Build Docker image & tarball
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/docker/Dockerfile
          push: false
          tags: simple-va:${{ github.ref_name }}

      - name: Export image to tar.gz
        run: |
          docker save simple-va:${{ github.ref_name }} \
            | gzip > docker_image_${{ github.ref_name }}.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: docker_image_${{ github.ref_name }}.tar.gz
          path: docker_image_${{ github.ref_name }}.tar.gz

  release:
    if: ${{ inputs.do-release }}
    name: Create GitHub Release
    needs: [build, docker_image]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
      - name: Publish Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          files: release_artifacts/**
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: true
