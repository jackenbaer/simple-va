name: "Reusable Go CI/CD"

on:
  workflow_call:
    inputs:
      go-version:
        type: string
        default: '1.24.2'
      run-tests:
        type: boolean
        default: false
      run-vulncheck:
        type: boolean
        default: false
      do-build:
        type: boolean
        default: false

jobs:
  test:
    if: ${{ inputs.run-tests }}
    name: Run Go Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
      - name: Test
        run: go test -v ./...

  vulncheck:
    if: ${{ inputs.run-vulncheck }}
    name: Run govulncheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ inputs.go-version }}
          go-package: './...'

  build:
    if: ${{ inputs.do-build }}
    name: Build & Inject Version
    needs: [test, vulncheck]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}
      - name: Collect build metadata
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -ldflags "-X 'main.Version=${{ github.ref_name }}' \
                              -X 'main.Commit=${COMMIT}' \
                              -X 'main.BuildTime=${BUILD_TIME}'" \
            -o simple-va-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: simple-va-${{ matrix.os }}-${{ matrix.arch }}
          path: ./simple-va-${{ matrix.os }}-${{ matrix.arch }}*

  check-api-version:
    if: ${{ inputs.do-build }}
    name: Check API version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PyYAML
        run: pip install pyyaml
      - name: Check API version
        run: |
          python3 scripts/check_api_version.py

  release:
    if: ${{ inputs.do-build }}
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
      - name: Publish Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          files: release_artifacts/**
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: true
